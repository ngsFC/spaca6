library("gprofiler2")
library("biomaRt")
library("corrplot")
library("stats")
library("tidyverse")
library("ggfortify")
library("RColorBrewer")
library("EnhancedVolcano")
library("plotly")
library("EDASeq")
library("DESeq2")
library("RUVSeq")
library("edgeR")
#library("NOISeq")
library("knitr")
library("pheatmap")
library("kableExtra")
library("gProfileR")
library("gprofiler2")
library("biomaRt")
library("corrplot")
library("stats")
library("tidyverse")
library("ggfortify")
library("RColorBrewer")
#library("EnhancedVolcano")
library("cowplot")
library("rmarkdown")
library("reshape")
library("gridExtra")
library("grid")
library("sva")
library("VennDiagram")
library("qdapTools")
library("UpSetR")
library("patchwork")
library("DT")
library("knitr")
counts <- read.table("WTs.featureCounts.hg19.txt", header=TRUE, row.names=1)
knitr::opts_chunk$set("/home/francescoc/Desktop/Project/Merla_lab/Marray_Merla")
knitr::opts_chunk$set(warning=FALSE, message=FALSE, fig.height=5, fig.width=10, fig.align = "center", class.source = "hide", echo = knitr::is_html_output())
#class.source = "foldable"
#class.source = "hide"
library("ChAMP")
library("RColorBrewer")
library("tidyverse")
library("quadprog")
library("vegan")
library("stringr")
library("factoextra")
library("viridis")
library("rmdformats")
library("pheatmap")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
library("ChIPseeker")
library("gprofiler2")
library("VennDiagram")
library("limma")
library("plotly")
library("cowplot")
library("ReactomePA")
library("knitr")
library("rmarkdown")
library("kableExtra")
library("reshape")
library("gridExtra")
library("grid")
library("ggpubr")
library("valr")
library("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
library("IlluminaHumanMethylationEPICmanifest")
library("patchwork")
knitr::opts_chunk$set("/home/francescoc/Desktop/Project/Merla_lab/Marray_Merla")
knitr::opts_chunk$set(warning=FALSE, message=FALSE, fig.height=5, fig.width=10, fig.align = "center", class.source = "hide", echo = knitr::is_html_output())
#class.source = "foldable"
#class.source = "hide"
library("ChAMP")
library("RColorBrewer")
library("tidyverse")
library("quadprog")
library("vegan")
library("stringr")
library("factoextra")
library("viridis")
library("rmdformats")
library("pheatmap")
library("TxDb.Hsapiens.UCSC.hg19.knownGene")
library("ChIPseeker")
library("gprofiler2")
library("VennDiagram")
library("limma")
library("plotly")
library("cowplot")
library("ReactomePA")
library("knitr")
library("rmarkdown")
library("kableExtra")
library("reshape")
library("gridExtra")
library("grid")
library("ggpubr")
library("valr")
library("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
library("IlluminaHumanMethylationEPICmanifest")
library("patchwork")
methylationarray <- "EPIC"
norm <- "BMIQ"
testDir <- "/home/francescoc/Desktop/Project/Merla_lab/Marray_Merla"
breaksList1 <- seq(-0.5, 0.5, by = 0.01)
breaksList <- seq(0, 1, by = 0.01)
annEPIC <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
bedEPIC <- as.data.frame(annEPIC) %>%
rownames_to_column("probeID") %>%
dplyr::select(chr, pos, probeID) %>%
mutate(end = pos) %>%
relocate(end, .after = pos)
colnames(bedEPIC) <- c("chrom", "start", "end", "probeID")
annotation <- data.frame(rownames(annEPIC), annEPIC$UCSC_RefGene_Name, annEPIC$UCSC_RefGene_Group)
colnames(annotation) <- c("probeID", "Gene", "feature")
all.genes <- annotation %>%
dplyr::select(Gene, feature) %>%
separate_rows(Gene, feature, sep = ";")
all.genes.TSS <- annotation %>%
filter(grepl("TSS200", feature) | grepl("TSS1500", feature))
all.genes.TSS <- all.genes.TSS %>%
dplyr::select(Gene, feature) %>%
separate_rows(Gene, feature, sep = ";") %>%
filter(feature == "TSS200" | feature == "TSS1500")
bg.genes <- unique(all.genes$Gene)
bg.genes.TSS <- unique(all.genes.TSS$Gene)
myLoad <- champ.load(testDir,
method="ChAMP",
methValue="B",
autoimpute=TRUE,
filterDetP=TRUE,
ProbeCutoff=0,
SampleCutoff=0.1,
detPcut=0.01,
filterBeads=TRUE,
beadCutoff=0.05,
filterNoCG=TRUE,
filterSNPs=TRUE,
population=NULL,
filterMultiHit=TRUE,
filterXY=TRUE,
force=FALSE,
arraytype=methylationarray)
ann.column <- data.frame(Sample = myLoad$pd$Sample_Group,
Syndrome = myLoad$pd$Syndrome)
rownames(ann.column) <- myLoad$pd$Sample_Name
samplecolor <- list(Sample = c(Control = "Grey", Case = "Steel blue"),
Syndrome = c(KS="Red", BWS="Purple", DS="orange", RSTS="forest green", Control = "Grey"))
#myLoad$pd$Slide <- as.numeric(myLoad$pd$Slide)
myLoad$pd$Slide <- as.character(myLoad$pd$Slide)
myNorm <- champ.norm(beta=myLoad$beta,
arraytype=methylationarray,
method=norm,
plotBMIQ = TRUE,
cores = 8)
champ.SVD(beta = myNorm,
PDFplot = TRUE,
pd = myLoad$pd,
RGEffect = FALSE)
myCombat <- champ.runCombat(beta=myNorm,
variablename="Syndrome",
pd=myLoad$pd,
batchname=c("Array"),
logitTrans=TRUE
)
champ.SVD(beta=myCombat,
PDFplot=TRUE,
pd=myLoad$pd,
RGEffect=FALSE
)
#myCombat <- myNorm
myRefBase <- champ.refbase(beta=myCombat,arraytype="EPIC")
head(myRefBase)
myRefBase$CellFraction
cf <- myRefBase$CellFraction
dim(cf)
head(cf)
View(cf)
head(myLoad$pd$Sample_Group)
myLoad$pd$Sample_Group
myLoad$pd$Syndrome
a = cf[myLoad$pd$Syndrome == "DS",]
a
b = cf[myLoad$pd$Syndrome == "Control",]
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
library(RColorBrewer)
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
age.pal <- brewer.pal(8,"Set1")
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
boxplot(b, at=0:5*3 + 2, xaxt="n", add=TRUE, col=age.pal[2])
par(mfrow=c(1,1))
a = cf[myLoad$pd$Syndrome == "DS",]
b = cf[myLoad$pd$Syndrome == "Control",]
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
boxplot(b, at=0:5*3 + 2, xaxt="n", add=TRUE, col=age.pal[2])
axis(1, at=0:5*3 + 1.5, labels=colnames(a), tick=TRUE)
legend("topleft", legend=c("NewBorns","OLD"), fill=age.pal)
par(mfrow=c(1,1))
a = cf[myLoad$pd$Syndrome == "DS",]
b = cf[myLoad$pd$Syndrome == "Control",]
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n",
col=age.pal[1], main="", ylab="Cell type proportion")
boxplot(b, at=0:5*3 + 2, xaxt="n", add=TRUE, col=age.pal[2])
axis(1, at=0:5*3 + 1.5, labels=colnames(a), tick=TRUE)
legend("topleft", legend=c("DS","Control"), fill=age.pal)
champ.refbase
data(CellTypeMeans450K)
CellTypeMeans450K
library("tidyverse")
library("ggpubr")
setwd("/home/francescoc/Desktop/Project/spaca/")
# List all .txt files in the directory
file_list <- list.files(pattern = "\\.txt$")
# Read all files into a list of data frames
data_list <- lapply(file_list, function(file) {
read.table(file, header = TRUE, sep = "\t")  # Adjust 'sep' based on your file format
})
# Join all data frames on the 'Gene' column
combined_data <- Reduce(function(x, y) full_join(x, y, by = "Gene"), data_list)
combined_data_filt <- combined_data %>%
filter(grepl("SPACA6", Gene)) %>%
pivot_longer(!Gene) %>%
mutate(Diagnosis=case_when(grepl("N4", name) ~ "NOA",
!grepl("N4", name) ~ "NormalF")) %>%
mutate(Diagnosis=factor(Diagnosis, levels=c("NormalF", "NOA")))
library("tidyverse")
library("ggpubr")
setwd("/home/francescoc/Desktop/Project/spaca/")
# List all .txt files in the directory
file_list <- list.files(pattern = "\\.txt$")
file_list
library("tidyverse")
library("ggpubr")
setwd("/home/francescoc/Desktop/Project/spaca/GSE106487")
# List all .txt files in the directory
file_list <- list.files(pattern = "\\.txt$")
file_list
# Read all files into a list of data frames
data_list <- lapply(file_list, function(file) {
read.table(file, header = TRUE, sep = "\t")  # Adjust 'sep' based on your file format
})
# Join all data frames on the 'Gene' column
combined_data <- Reduce(function(x, y) full_join(x, y, by = "Gene"), data_list)
combined_data_filt <- combined_data %>%
filter(grepl("SPACA6", Gene)) %>%
pivot_longer(!Gene) %>%
mutate(Diagnosis=case_when(grepl("N4", name) ~ "NOA",
!grepl("N4", name) ~ "NormalF")) %>%
mutate(Diagnosis=factor(Diagnosis, levels=c("NormalF", "NOA")))
combined_data
combined_data_filt <- combined_data %>%
filter(grepl("SPACA6", Gene)) %>%
pivot_longer(!Gene) %>%
mutate(Diagnosis=case_when(grepl("N4", name) ~ "NOA",
!grepl("N4", name) ~ "NormalF")) %>%
mutate(Diagnosis=factor(Diagnosis, levels=c("NormalF", "NOA")))
library("tidyverse")
library("ggpubr")
setwd("/home/francescoc/Desktop/Project/spaca/GSE106487")
# List all .txt files in the directory
file_list <- list.files(pattern = "\\.txt$")
# Read all files into a list of data frames
data_list <- lapply(file_list, function(file) {
read.table(file, header = TRUE, sep = "\t")  # Adjust 'sep' based on your file format
})
# Join all data frames on the 'Gene' column
combined_data <- Reduce(function(x, y) full_join(x, y, by = "Gene"), data_list)
combined_data_filt <- combined_data %>%
filter(grepl("SPACA6", Gene)) %>%
pivot_longer(!Gene) %>%
as.data.frame() %>%
mutate(Diagnosis=case_when(grepl("N4", name) ~ "NOA",
!grepl("N4", name) ~ "NormalF")) %>%
mutate(Diagnosis=factor(Diagnosis, levels=c("NormalF", "NOA")))
combined_data_filt <- combined_data %>%
filter(grepl("SPACA6", Gene)) %>%
pivot_longer(!Gene) %>%
mutate(Diagnosis=case_when(grepl("N4", name) ~ "NOA",
!grepl("N4", name) ~ "NormalF")) %>%
mutate(Diagnosis=factor(Diagnosis, levels=c("NormalF", "NOA")))
dim(combined_data)
colnames(combined_data)[1]
combined_data_filt <- combined_data %>%
filter(grepl("SPACA6", Gene))
combined_data_filt <- combined_data %>%
filter(grepl("SPACA6", Gene))%>%
pivot_longer(!Gene)
colnames(combined_data)[2]
colnames(combined_data)[3]
colnames(combined_data)[4]
head(combined_data)
ls
dim(combined_data)
combined_data_filt <- combined_data %>%
filter(grepl("SPACA6", Gene)) %>%
pivot_longer(!c(Gene, name)) %>%
mutate(Diagnosis=case_when(grepl("N4", name) ~ "NOA",
!grepl("N4", name) ~ "NormalF")) %>%
mutate(Diagnosis=factor(Diagnosis, levels=c("NormalF", "NOA")))
# Join all data frames on the 'Gene' column
combined_data <- Reduce(function(x, y) full_join(x, y, by = "Gene"), data_list)
colnames(combined_data)[1]
colnames(combined_data)[2]
combined_data$name
combined_data$value
combined_data$Diagnosis
combined_data$N2_TESTIS_1_1
library("tidyverse")
library("ggpubr")
setwd("/home/francescoc/Desktop/Project/spaca/GSE106487")
# List all .txt files in the directory
file_list <- list.files(pattern = "\\.txt$")
# Read all files into a list of data frames
data_list <- lapply(file_list, function(file) {
read.table(file, header = TRUE, sep = "\t")  # Adjust 'sep' based on your file format
})
# Join all data frames on the 'Gene' column
combined_data <- Reduce(function(x, y) full_join(x, y, by = "Gene"), data_list)
library("tidyverse")
library("ggpubr")
setwd("/home/francescoc/Desktop/Project/spaca/GSE106487")
# List all .txt files in the directory
file_list <- list.files(pattern = "\\.txt$")
# Read all files into a list of data frames
data_list <- lapply(file_list, function(file) {
read.table(file, header = TRUE, sep = "\t")  # Adjust 'sep' based on your file format
})
# Join all data frames on the 'Gene' column
combined_data <- Reduce(function(x, y) full_join(x, y, by = "Gene"), data_list)
combined_data_filt <- combined_data %>%
filter(grepl("SPACA6", Gene)) %>%
pivot_longer(!Gene) %>%
mutate(Diagnosis=case_when(grepl("N4", name) ~ "NOA",
!grepl("N4", name) ~ "NormalF")) %>%
mutate(Diagnosis=factor(Diagnosis, levels=c("NormalF", "NOA")))
a <- ggplot(combined_data_filt %>%
filter(Gene == "SPACA6P", value>0), aes(x=Diagnosis, y=value, color=Diagnosis)) +
geom_violin(trim=FALSE) +
geom_boxplot() +
#geom_jitter() +
scale_color_manual(values=c("grey", "steelblue")) +
theme_minimal() +
ylab("TPM") +
#theme(axis.text.x = element_text(angle = 90)) +
ggtitle("SPACA6P gene") +
#ylim(c(0,600)) +
#scale_fill_manual(values = c()) +
theme(legend.position="none",
axis.title.x=element_blank(),
plot.title = element_text(hjust = 0.5),
axis.text.x=element_text(angle=90, hjust=1),
text = element_text(size=15)) +
stat_compare_means(method = "t.test", paired = F,label = "p.signif", ref.group = "NormalF")
a
a <- ggplot(combined_data_filt %>%
filter(Gene == "SPACA6P-AS", value >0), aes(x=Diagnosis, y=value, color=Diagnosis)) +
geom_violin(trim=FALSE) +
geom_boxplot() +
#geom_jitter() +
scale_color_manual(values=c("grey", "steelblue")) +
theme_minimal() +
ylab("TPM") +
#theme(axis.text.x = element_text(angle = 90)) +
ggtitle("SPACA6P-AS gene") +
#ylim(c(0,100)) +
#scale_fill_manual(values = c()) +
theme(legend.position="none",
axis.title.x=element_blank(),
plot.title = element_text(hjust = 0.5),
axis.text.x=element_text(angle=90, hjust=1),
text = element_text(size=15)) +
stat_compare_means(method = "t.test", paired = F,label = "p.signif", ref.group = "NormalF")
a
library(plotly)
anno <- combined_data_filt %>%
filter(Gene == "SPACA6P",
!name %in% c("GV_2n_4_48", "X4_GV_2N_2_14", "X5_1N_15", "X2JJ_25", "X1JC_15"))
pca <- combined_data %>%
filter(grepl("SPACA6", Gene)) %>%
column_to_rownames("Gene") %>%
t() %>%
as.data.frame() %>%
rownames_to_column("Samples") %>%
filter(!Samples %in% c("GV_2n_4_48", "X4_GV_2N_2_14", "X5_1N_15", "X2JJ_25", "X1JC_15")) %>%
column_to_rownames("Samples")
pca <- as.data.frame(pca)
pca["Color"] <- as.character(anno$Diagnosis)
ma <- pca[c(1:(length(pca)-1))]
PCma <- prcomp(ma, center=T,scale.=T)
PCma.gr <- data.frame(PCma$x, Color=pca$Color)
PCs <- round(PCma$sdev^2 / sum(PCma$sdev^2) * 100, 2)
PCs <- paste(colnames(PCma.gr), "(", paste(as.character(PCs), "%", ")", sep=""))
a <- ggplot(PCma.gr,aes(x=PC1, y=PC2, col=Color, label=rownames(PCma.gr))) +
xlab(PCs[1]) +
ylab(PCs[2]) +
geom_point(size=2,alpha=1,aes(shape=Color)) +
theme_classic() +
#xlim(-60,30) +
#ylim(-60,60) +
ggtitle("PCA all probes")
ggplotly(a)
# Load necessary libraries
library(tidyverse) # For data manipulation and visualization
library(readr) # For reading the data file
library(ggplot2) # For plotting
library(dplyr) # For data manipulation
library(forcats) # For working with factors
# Filter for SPACA6P and SPACA6P-AS genes
genes_of_interest <- combined_data_filt %>% filter(Gene %in% c("SPACA6P", "SPACA6P-AS")) %>% mutate(value=log10(value+1))
# Separate data by diagnosis for easier analysis
data_normal <- genes_of_interest %>% filter(Diagnosis == "NormalF")
data_disease <- genes_of_interest %>% filter(Diagnosis == "NOA") # Replace "Disease" with the actual disease name in your dataset
# Visualization with ggplot2
# Violin plot to show expression distribution
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_violin() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="")
# Box plot for central tendency and variability
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_boxplot() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="")
# Visualization with ggplot2
# Violin plot to show expression distribution
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_violin() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="")
# Box plot for central tendency and variability
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_boxplot() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="")
# Statistical Testing
# Assuming the data is not normally distributed, use Mann-Whitney U test
# Mann-Whitney U test for SPACA6P
spaca6p_values_normal <- data_normal %>% filter(Gene == "SPACA6P") %>% pull(value)
spaca6p_values_disease <- data_disease %>% filter(Gene == "SPACA6P") %>% pull(value)
wilcox.test(spaca6p_values_normal, spaca6p_values_disease)
# Repeat the Mann-Whitney U test for SPACA6P-AS similarly
spaca6p_values_normal <- data_normal %>% filter(Gene == "SPACA6P-AS") %>% pull(value)
spaca6p_values_disease <- data_disease %>% filter(Gene == "SPACA6P-AS") %>% pull(value)
wilcox.test(spaca6p_values_normal, spaca6p_values_disease)
# Visualization with ggplot2
# Violin plot to show expression distribution
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_violin() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="")
# Visualization with ggplot2
# Violin plot to show expression distribution
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_violin() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="") +
scale_fill_manual(values = c("darkgrey", "steelblue"))
# Box plot for central tendency and variability
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_boxplot() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="") +
scale_fill_manual(values = c("darkgrey", "steelblue"))
# Visualization with ggplot2
# Violin plot to show expression distribution
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_violin() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="") +
scale_fill_manual(values = c("darkgrey", "steelblue"))
# Visualization with ggplot2
# Violin plot to show expression distribution
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_violin() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="") +
scale_fill_manual(values = c("darkgrey", "steelblue")) +
stat_compare_means(method = "wilcox.test", paired = F,label = "p.signif", ref.group = "NormalF")
# Visualization with ggplot2
# Violin plot to show expression distribution
ggplot(genes_of_interest, aes(x=Diagnosis, y=value, fill=Diagnosis)) +
geom_violin() +
facet_wrap(~Gene) +
theme_minimal() +
labs(title="Gene Expression by Diagnosis", y="TPM", x="") +
scale_fill_manual(values = c("darkgrey", "steelblue")) +
stat_compare_means(method = "wilcox.test", paired = F,label = "p.signif", ref.group = "NormalF")
head(genes_of_interest)
genes_of_interest1 <- genes_of_interest %>%
dplyr::separate(name, into = c("id", "cell", "n", "n1"), sep = "_")
genes_of_interest1 <- genes_of_interest %>%
separate(name, into = c("id", "cell", "n", "n1"), sep = "_")
View(genes_of_interest1)
table(genes_of_interest1$cell)
View(genes_of_interest)
